{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Documents/Csc350%20pj1/musicv.3/src/app/page.js"],"sourcesContent":["/* eslint-disable @next/next/no-img-element */\n/* eslint-disable react/no-unescaped-entities */\n\"use client\"; // Add this for Next.js App Router\n\nimport { useEffect, useState } from \"react\";\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n  \n\n// Initialize Firebase (ป้องกันการ initialize ซ้ำ)\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getFirestore(app);\n\nexport default function Home() {\n  const [songs, setSongs] = useState([]); // State for songs fetched from Firebase\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [activeVideo, setActiveVideo] = useState(null); // Stores YouTube video ID\n  const [playlist, setPlaylist] = useState([]); // State for the user's playlist\n  const [showPlaylist, setShowPlaylist] = useState(false); // Toggle between all songs and playlist view\n  const [playingFromPlaylist, setPlayingFromPlaylist] = useState(false); // Is the current song from the playlist?\n  const [currentPlaylistIndex, setCurrentPlaylistIndex] = useState(-1); // Index of the song playing from the playlist\n\n  // Fetch songs from Firebase on initial load\n  useEffect(() => {\n    const fetchSongsFromFirebase = async () => {\n      setLoading(true);\n      setError(null); // Clear previous errors\n      try {\n        const songsCollectionRef = collection(db, 'songs'); // Assuming collection name is 'songs'\n        const songSnapshot = await getDocs(songsCollectionRef);\n        const songList = songSnapshot.docs.map(doc => ({\n          id: doc.id, // Get document ID\n          ...doc.data() // Get all fields from the document\n        }));\n        // Ensure data is an array before setting state\n        if (Array.isArray(songList)) {\n            setSongs(songList);\n        } else {\n            console.error(\"Fetched data is not an array:\", songList);\n            setSongs([]); // Set to empty array if data is invalid\n            throw new Error(\"รูปแบบข้อมูลเพลงไม่ถูกต้อง\");\n        }\n      } catch (err) {\n        console.error(\"Firebase fetch error:\", err);\n        setError(err.message || \"ไม่สามารถโหลดข้อมูลเพลงจาก Firebase ได้\");\n        setSongs([]); // Ensure songs is an empty array on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Load saved playlist from localStorage\n    const savedPlaylist = localStorage.getItem(\"musicPlaylist\");\n    if (savedPlaylist) {\n      try {\n        const parsedPlaylist = JSON.parse(savedPlaylist);\n         if (Array.isArray(parsedPlaylist)) { // Validate it's an array\n            setPlaylist(parsedPlaylist);\n         } else {\n             console.error(\"Saved playlist data is not an array\");\n             localStorage.removeItem(\"musicPlaylist\"); // Clear invalid data\n         }\n      } catch (e) {\n        console.error(\"Error loading saved playlist\", e);\n        localStorage.removeItem(\"musicPlaylist\"); // Clear corrupted data\n      }\n    }\n\n    fetchSongsFromFirebase();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Save playlist to localStorage whenever it changes\n  useEffect(() => {\n    // Only save if playlist has items to avoid storing empty array string unnecessarily\n    // And ensure it's actually an array before saving\n    if (Array.isArray(playlist) && playlist.length > 0) {\n      localStorage.setItem(\"musicPlaylist\", JSON.stringify(playlist));\n    } else if (Array.isArray(playlist) && playlist.length === 0) {\n      // Optionally remove the item if the playlist becomes empty\n      localStorage.removeItem(\"musicPlaylist\");\n    }\n  }, [playlist]);\n\n  // Extract YouTube ID from various URL formats\n  const getYoutubeId = (url) => {\n    if (!url) return null;\n    if (typeof url !== 'string') return null; // Ensure url is a string\n\n    // If it's potentially already just an ID (basic check)\n    if (!url.includes(\"http\") && url.length >= 11 && !url.includes(\" \")) {\n      return url;\n    }\n\n    try {\n      // Regex to capture video ID from various YouTube URL formats\n      const regExp = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n      const match = url.match(regExp);\n      if (match && match[1]) {\n          return match[1];\n      }\n    } catch (e) {\n      console.error(\"Error parsing YouTube URL:\", e);\n      return null;\n    }\n\n    return null; // Return null if no valid ID found\n  };\n\n  // Get YouTube thumbnail URL from video ID\n  const getThumbnailUrl = (youtubeId) => {\n    if (!youtubeId) return \"/api/placeholder/320/180\"; // Fallback image\n    // Using mqdefault for medium quality. Can use hqdefault, sddefault, maxresdefault if available\n    return `https://img.youtube.com/vi/${youtubeId}/mqdefault.jpg`;\n  };\n\n  // Start playing a song (from the main list or direct call)\n  const playSong = (youtubeUrl) => {\n    const youtubeId = getYoutubeId(youtubeUrl);\n    if (youtubeId) {\n      setActiveVideo(youtubeId);\n      setPlayingFromPlaylist(false); // Mark as not playing from playlist\n      setCurrentPlaylistIndex(-1); // Reset playlist index\n    } else {\n      setError(\"ไม่พบลิงก์ YouTube หรือลิงก์ไม่ถูกต้องสำหรับเพลงนี้\");\n      console.warn(\"Could not get YouTube ID for:\", youtubeUrl);\n    }\n  };\n\n  // Find the full song object based on the active YouTube ID\n  const getActiveSong = () => {\n    if (!activeVideo) return null;\n\n    let foundSong = null;\n\n    // If playing from playlist, prioritize finding it there\n    if (playingFromPlaylist && currentPlaylistIndex !== -1 && playlist[currentPlaylistIndex]) {\n      if (getYoutubeId(playlist[currentPlaylistIndex].youtubeLink) === activeVideo) {\n        return playlist[currentPlaylistIndex];\n      }\n    }\n\n    // Search in the main songs list (if loaded)\n    if (Array.isArray(songs)) {\n        foundSong = songs.find(song => getYoutubeId(song.youtubeLink) === activeVideo);\n        if (foundSong) return foundSong;\n    }\n\n\n    // As a fallback, search the entire playlist again (if not found above or not playing from playlist)\n    if (Array.isArray(playlist)) {\n        foundSong = playlist.find(song => getYoutubeId(song.youtubeLink) === activeVideo);\n    }\n\n\n    return foundSong; // Return the found song or null\n  };\n\n  const activeSong = getActiveSong(); // Memoize might be useful here if performance becomes an issue\n\n  // Add a song object to the user's playlist\n  const addToPlaylist = (songToAdd) => {\n     // Basic validation of song object\n     if (!songToAdd || !songToAdd.youtubeLink || !songToAdd.songTitle) {\n         alert(\"ข้อมูลเพลงไม่สมบูรณ์ ไม่สามารถเพิ่มได้\");\n         return;\n     }\n\n    const songYoutubeId = getYoutubeId(songToAdd.youtubeLink);\n    if (!songYoutubeId) {\n         alert(\"ลิงก์ YouTube ไม่ถูกต้อง ไม่สามารถเพิ่มเพลงนี้ได้\");\n         return;\n    }\n\n    // Check if the song (based on YouTube ID) is already in the playlist\n    const songExists = playlist.some(\n      item => getYoutubeId(item.youtubeLink) === songYoutubeId\n    );\n\n    if (!songExists) {\n      // Ensure we add a clean object with expected fields\n      const playlistEntry = {\n          id: songToAdd.id, // Keep the original ID if available\n          songTitle: songToAdd.songTitle,\n          bandName: songToAdd.bandName,\n          youtubeLink: songToAdd.youtubeLink,\n          albumTitle: songToAdd.albumTitle || null, // Add other relevant fields\n          chordLink: songToAdd.chordLink || null, // Include chord link if present\n          // Add any other fields you want to store in the playlist item\n      };\n      const newPlaylist = [...playlist, playlistEntry];\n      setPlaylist(newPlaylist);\n      alert(`เพิ่ม \"${songToAdd.songTitle}\" ลงในเพลย์ลิสต์แล้ว`);\n    } else {\n      alert(`\"${songToAdd.songTitle}\" อยู่ในเพลย์ลิสต์แล้ว`);\n    }\n  };\n\n  // Remove a song from the playlist by its index\n  const removeFromPlaylist = (index) => {\n    if (index < 0 || index >= playlist.length) return; // Index out of bounds\n\n    const songToRemove = playlist[index];\n    const newPlaylist = playlist.filter((_, i) => i !== index); // More concise removal\n    setPlaylist(newPlaylist);\n    alert(`ลบ \"${songToRemove.songTitle}\" ออกจากเพลย์ลิสต์แล้ว`);\n\n    // Adjust playback if the removed song affected the current state\n    if (playingFromPlaylist) {\n      if (index === currentPlaylistIndex) {\n        // Removed the currently playing song\n        if (newPlaylist.length > 0) {\n          // Play the next song (or the first if last was removed)\n          const nextIndex = index % newPlaylist.length; // Get the song now at the same index (or wrap around)\n          playPlaylistSong(nextIndex);\n        } else {\n          // Playlist is now empty\n          setActiveVideo(null);\n          setPlayingFromPlaylist(false);\n          setCurrentPlaylistIndex(-1);\n        }\n      } else if (index < currentPlaylistIndex) {\n        // Removed a song before the current one, shift index back\n        setCurrentPlaylistIndex(currentPlaylistIndex - 1);\n      }\n    }\n  };\n\n  // Clear the entire playlist\n  const clearPlaylist = () => {\n    if (playlist.length > 0 && confirm(\"คุณต้องการล้างเพลย์ลิสต์ทั้งหมดหรือไม่?\")) {\n      setPlaylist([]);\n      // localStorage is cleared via the useEffect hook listening to 'playlist'\n\n      // Stop playback if it was from the playlist\n      if (playingFromPlaylist) {\n        setActiveVideo(null);\n        setPlayingFromPlaylist(false);\n        setCurrentPlaylistIndex(-1);\n      }\n    }\n  };\n\n  // Play a specific song from the playlist by index\n  const playPlaylistSong = (index) => {\n    if (index >= 0 && index < playlist.length) {\n      const song = playlist[index];\n      const youtubeId = getYoutubeId(song.youtubeLink);\n      if (youtubeId) {\n        setActiveVideo(youtubeId);\n        setPlayingFromPlaylist(true); // Mark as playing from playlist\n        setCurrentPlaylistIndex(index); // Set the current index\n      } else {\n         setError(`ลิงก์ YouTube ไม่ถูกต้องสำหรับเพลง \"${song.songTitle}\" ในเพลย์ลิสต์`);\n         // Optionally remove the faulty song or skip it\n      }\n    }\n  };\n\n  // Play the next logical song in the playlist\n  const playNextSong = () => {\n    // Only proceed if playing from playlist and playlist has items\n    if (!playingFromPlaylist || playlist.length === 0) return;\n\n    const nextIndex = (currentPlaylistIndex + 1) % playlist.length; // Wrap around\n    playPlaylistSong(nextIndex);\n  };\n\n  // Play the previous logical song in the playlist\n  const playPreviousSong = () => {\n    // Only proceed if playing from playlist and playlist has items\n    if (!playingFromPlaylist || playlist.length === 0) return;\n\n    const prevIndex = (currentPlaylistIndex - 1 + playlist.length) % playlist.length; // Wrap around correctly\n    playPlaylistSong(prevIndex);\n  };\n\n  // Play a random song from the playlist (excluding the current one if possible)\n  const shufflePlaylist = () => {\n    if (playlist.length === 0) return;\n    if (playlist.length === 1) {\n      playPlaylistSong(0); // Just play the only song\n      return;\n    }\n\n    let randomIndex;\n    do {\n      randomIndex = Math.floor(Math.random() * playlist.length);\n    } while (randomIndex === currentPlaylistIndex); // Ensure it's different from current\n\n    playPlaylistSong(randomIndex);\n  };\n\n  // Callback for when the YouTube video ends\n  const handleVideoEnded = (event) => {\n    // YouTube API sometimes sends state -1 (unstarted) briefly after ending, check for state 0 (ended)\n     // Note: The 'onEnded' prop on iframe might not be reliable. Using YouTube IFrame Player API is better for events.\n     // For simplicity with iframe, we assume this function is called on end.\n    console.log(\"Video ended event detected\");\n    if (playingFromPlaylist) {\n      console.log(\"Playing next song from playlist\");\n      playNextSong();\n    } else {\n      console.log(\"Playback finished (not from playlist)\");\n      // Optional: Stop player or do something else when a single song finishes\n      // setActiveVideo(null); // Example: Clear the player\n    }\n  };\n\n  // --- Render JSX ---\n  return (\n    <div className=\"container\">\n      {/* Header Bar */}\n      <div className=\"header-bar\">\n        {/* Link to Admin Login - adjust href as needed */}\n        <button onClick={() => window.location.href = \"/login\"} className=\"login-btn\">\n          🔐 For Admin\n        </button>\n      </div>\n      <h1>เครื่องเล่นเพลงสุดที่รัก App</h1> {/* Updated Title */}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"error-message\">\n          <p>เกิดข้อผิดพลาด: {error}</p>\n          <button onClick={() => setError(null)}>ปิด</button> {/* Allow dismissing error */}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {loading ? (\n        <div className=\"loading-container\">\n          <div className=\"spinner\"></div>\n          <p>กำลังโหลดเพลง...</p>\n        </div>\n      ) : (\n        <>\n          {/* View Toggle Buttons */}\n          <div className=\"view-toggle\">\n            <button\n              className={`toggle-btn ${!showPlaylist ? 'active' : ''}`}\n              onClick={() => setShowPlaylist(false)}\n            >\n              รายการเพลงทั้งหมด {Array.isArray(songs) ? `(${songs.length})` : '(0)'}\n            </button>\n            <button\n              className={`toggle-btn ${showPlaylist ? 'active' : ''}`}\n              onClick={() => setShowPlaylist(true)}\n            >\n              เพลย์ลิสต์ {Array.isArray(playlist) ? `(${playlist.length})` : '(0)'}\n            </button>\n          </div>\n\n          {/* Main Layout: Player on Right, List on Left */}\n          <div className=\"horizontal-layout\">\n            {/* Right Side: Main Player Area */}\n            <div className=\"main-player-area\">\n              {activeVideo ? (\n                <div className=\"active-player\">\n                  {/* Display current song title and artist */}\n                  <h2 className=\"now-playing\">\n                    {activeSong?.songTitle || 'กำลังโหลด...'} - {activeSong?.bandName || ''}\n                  </h2>\n                  {/* YouTube Iframe */}\n                  <div className=\"video-wrapper\">\n                    <iframe\n                      key={activeVideo} // Add key to force iframe reload on video change\n                      src={`https://www.youtube.com/embed/${activeVideo}?autoplay=1&rel=0&modestbranding=1`}\n                      title=\"YouTube video player\"\n                      frameBorder=\"0\"\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen\n                      // onEnded={handleVideoEnded} // Note: onEnded might be unreliable. YT API is better.\n                    ></iframe>\n                  </div>\n                  {/* Controls for the active player */}\n                  <div className=\"active-player-controls\">\n                    {/* Playlist specific controls */}\n                    {playingFromPlaylist && (\n                      <>\n                        <button onClick={playPreviousSong} className=\"playlist-control-btn\" disabled={playlist.length < 2}>\n                          ⏮️ ก่อนหน้า\n                        </button>\n                        <button onClick={playNextSong} className=\"playlist-control-btn\" disabled={playlist.length < 2}>\n                          ถัดไป ⏭️\n                        </button>\n                         <button onClick={shufflePlaylist} className=\"playlist-control-btn\" disabled={playlist.length < 2}>\n                            🔀 สุ่มเพลง\n                        </button>\n                      </>\n                    )}\n                     {/* General controls */}\n                    <button onClick={() => setActiveVideo(null)} className=\"control-btn\">\n                      ⏹️ ปิดเครื่องเล่น\n                    </button>\n                    {/* Chord Link Button (Optional) */}\n                    {activeSong?.chordLink && (\n                      <button onClick={() => window.open(activeSong.chordLink, \"_blank\")} className=\"control-btn\">\n                        🎸 ดูคอร์ด\n                      </button>\n                    )}\n                    {/* Add to Playlist Button (Show only if NOT playing from playlist) */}\n                    {!playingFromPlaylist && activeSong && (\n                      <button\n                        onClick={() => addToPlaylist(activeSong)}\n                        className=\"add-to-playlist-btn control-btn\"\n                      >\n                        ➕ เพิ่มในเพลย์ลิสต์\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ) : (\n                // Placeholder when no video is active\n                <div className=\"empty-player\">\n                  <p>🎶 เลือกเพลงจากรายการด้านซ้ายเพื่อเริ่มเล่น 🎶</p>\n                </div>\n              )}\n            </div>\n\n            {/* Left Side: Song List / Playlist Area */}\n            <div className=\"playlist-container\">\n              {/* Conditional Rendering based on showPlaylist state */}\n              {showPlaylist ? (\n                // --- Playlist View ---\n                <>\n                  <div className=\"playlist-header\">\n                    <h3 className=\"playlist-title\">เพลย์ลิสต์ของฉัน</h3>\n                    {playlist.length > 0 && (\n                      <div className=\"playlist-actions\">\n                        <button\n                          onClick={() => playPlaylistSong(0)} // Start playing from the first song\n                          className=\"play-all-btn\"\n                          disabled={playlist.length === 0}\n                        >\n                          ▶️ เล่นทั้งหมด\n                        </button>\n                        <button\n                          onClick={clearPlaylist}\n                          className=\"clear-btn\"\n                          disabled={playlist.length === 0}\n                        >\n                          🗑️ ล้างเพลย์ลิสต์\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"song-list\">\n                    {playlist.length > 0 ? (\n                      playlist.map((song, index) => {\n                        const youtubeId = getYoutubeId(song.youtubeLink);\n                        const isActive = playingFromPlaylist && currentPlaylistIndex === index;\n\n                        return (\n                          <div\n                            key={`playlist-${song.id || index}`} // Use song id if available, else index\n                            className={`song-item playlist-item ${isActive ? 'active-song' : ''}`}\n                          >\n                            {/* Clickable area to play the song */}\n                            <div\n                              className=\"song-content\"\n                              onClick={() => playPlaylistSong(index)}\n                              title={`เล่น ${song.songTitle}`}\n                            >\n                              <div className=\"song-thumbnail-small\">\n                                <img\n                                  src={getThumbnailUrl(youtubeId)}\n                                  alt={`${song.songTitle} thumbnail`}\n                                  loading=\"lazy\" // Add lazy loading for images\n                                />\n                                {/* Play icon overlay */}\n                                <div className=\"thumbnail-overlay\">\n                                  <div className=\"play-icon\">\n                                    <svg viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\" /></svg>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"song-info\">\n                                <h4 className=\"song-title\">{song.songTitle}</h4>\n                                <p className=\"song-artist\">{song.bandName}</p>\n                              </div>\n                            </div>\n                            {/* Action button (Remove from playlist) */}\n                            <div className=\"playlist-item-actions\">\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation(); // Prevent triggering play onClick\n                                  removeFromPlaylist(index);\n                                }}\n                                className=\"remove-btn\"\n                                title=\"นำออกจากเพลย์ลิสต์\"\n                              >\n                                ✕\n                              </button>\n                            </div>\n                          </div>\n                        );\n                      })\n                    ) : (\n                      // Message when playlist is empty\n                      <div className=\"empty-playlist\">\n                        <p>เพลย์ลิสต์ของคุณว่างเปล่า</p>\n                        <p>เพิ่มเพลงโดยกดปุ่ม \"+\" ขณะเล่นเพลง</p>\n                      </div>\n                    )}\n                  </div>\n                </>\n              ) : (\n                // --- All Songs View ---\n                <>\n                  <h3 className=\"playlist-title\">รายการเพลงทั้งหมด</h3>\n                  <div className=\"song-list\">\n                    {Array.isArray(songs) && songs.length > 0 ? (\n                      songs.map((song) => {\n                         // Check if song object and essential fields exist\n                         if (!song || !song.id || !song.youtubeLink || !song.songTitle) {\n                            console.warn(\"Skipping rendering song due to missing data:\", song);\n                            return null; // Don't render item if data is missing\n                         }\n                        const youtubeId = getYoutubeId(song.youtubeLink);\n                        // Determine if this song is the currently active one (and not from playlist)\n                        const isActive = !playingFromPlaylist && activeVideo === youtubeId;\n\n                        return (\n                          <div\n                            key={song.id} // Use Firestore document ID as key\n                            className={`song-item ${isActive ? 'active-song' : ''}`}\n                          >\n                             {/* Clickable area to play the song */}\n                            <div\n                              className=\"song-content\"\n                              onClick={() => playSong(song.youtubeLink)}\n                              title={`เล่น ${song.songTitle}`}\n                            >\n                              <div className=\"song-thumbnail-small\">\n                                <img\n                                  src={getThumbnailUrl(youtubeId)}\n                                  alt={`${song.songTitle} thumbnail`}\n                                  loading=\"lazy\"\n                                />\n                                <div className=\"thumbnail-overlay\">\n                                  <div className=\"play-icon\">\n                                     <svg viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\" /></svg>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"song-info\">\n                                <h4 className=\"song-title\">{song.songTitle}</h4>\n                                <p className=\"song-artist\">{song.bandName}</p>\n                                {/* Optionally display album title if available */}\n                                {/* {song.albumTitle && <p className=\"song-album\">{song.albumTitle}</p>} */}\n                              </div>\n                            </div>\n                             {/* Action button (Add to playlist) */}\n                            <div className=\"song-item-actions\">\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  addToPlaylist(song);\n                                }}\n                                className=\"add-btn\"\n                                title=\"เพิ่มในเพลย์ลิสต์\"\n                              >\n                                +\n                              </button>\n                            </div>\n                          </div>\n                        );\n                      })\n                    ) : (\n                       // Message when no songs are loaded (and not loading)\n                       !loading && <p className=\"no-songs\">ไม่พบเพลงในระบบ หรือยังไม่ได้โหลด</p>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}